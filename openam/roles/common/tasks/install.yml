---

# TODO: in a load balanced configuration, will need lineinfile on $tools_dir$deployment_uri/bin/ssoadm
# replace:
#     com.sun.identity.cli.CommandManager "$@"
# with:
#     -D"com.iplanet.am.naming.map.site.to.server=$lb_primary_url=http://localhost:8080$deployment_uri" \
#     com.sun.identity.cli.CommandManager "$@"
# but first, bring up the lb and try without it. i think that's why it's timing out.

- name: install openam
  hosts: $hosts
  gather_facts: no

  vars_files:
    - ../vars/main.yml

  tasks:

    - name: create openam config dir (to ensure it is writable by jee container)
      file: path={{ base_dir }}
            state=directory
            owner={{ container_owner }}
            group={{ container_owner }}

    - name: try to transfer openam war first
      # copy: src=../files/OpenAM-{{ version }}.war
      #       dest={{ system_artefact_dir }}/OpenAM-{{ version }}.war
      copy: src=../files/OpenAM-{{ version }}.war
            dest={{ container_webapps_dir }}/{{deployment_uri }}.war
      # register: transfer_result
      # ignore_errors: yes

    # FIXME
    # - name: otherwise, download openam war
    #   get_url: url={{ archive }}
    #            dest={{ system_artefact_dir }}/openam_{{ version }}.zip
    #   when_failed: {{ transfer_result }}

    # FIXME: transfer headless openam war
    # - name: deploy headless openam war to jee container
    #   command: cp /tmp/openam_{{ version }}/openam-server-only-{{ version }}.war {{ container_webapps_dir }}{{ deployment_uri }}.war
    #            creates={{ container_webapps_dir }}{{ deployment_uri }}.war
    #   when: headless

    - name: transfer openam configurator
      unarchive: src=../files/SSOConfiguratorTools-{{ version }}.zip
                 dest={{ configurator_dir }}
      # register: transfer_result
      # ignore_errors: yes

    # TODO: otherwise, download?

    - name: transfer openam admin tools
      unarchive: src=../files/SSOConfiguratorTools-{{ version }}.zip
      unarchive: src=../files/SSOAdminTools-{{ version }}.zip
                 dest={{ tools_dir }}
      when: {{ install_tools }}
      # register: transfer_result
      # ignore_errors: yes

    # TODO: otherwise, download?
    #
      command: unzip -q /tmp/openam_{{ version }}/openam-distribution-ssoadmintools-{{ version }}.zip -d {{ tools_dir }}
               creates={{ tools_dir }}
      when: {{ install_tools }}

    # - name: unzip diagnostic tools
    #   command: unzip -q /tmp/openam_{{ version }}/openam-distribution-diagnostics-{{ version }}.zip -d {{ diagnostics_dir }}
    #            creates={{ diagnostics_dir }}
    #   when: {{ diagnostics }}

    - name: prepare openam configuration for first server
      template: src=../templates/openam_config_first.properties
                dest=/tmp/openam_config.properties
                mode=0400
      when: join_site is not defined

    - name: prepare openam configuration for subsequent servers
      template: src=../templates/openam_config_subsequent.properties
                dest=/tmp/openam_config.properties
                mode=0400
      when: join_site is defined

    # NOTE: we could also make {{ container_home }} writable by {{ container_owner }}, but that's less secure
    - name: create openam pointer dir (to ensure it is writable by container owner)
      file: path={{ container_home }}/.openamcfg
            state=directory
            mode=0755
            owner={{ container_owner }}
            group={{ container_owner }}

    - name: start jee container
      service: name={{ container_service }}
               state=started

    - name: wait for jee container
      wait_for: port=8080
                delay=0
                timeout=120

    # - name: make the hostname resolveable (required by openam)
    #   lineinfile: dest=/etc/hosts
    #               line="127.0.0.1   {{ hostname }}"
    #               state=present

    - name: build openam with configurator
      command: java -jar {{ configurator_dir }}/openam-configurator-tool-{{ version }}.jar --file /tmp/openam_config.properties
               creates={{ base_dir }}{{ deployment_uri }}

    - name: set up admin tools
      command: ./setup --path {{ base_dir }} --debug {{ tools_dir }}/debug --log {{ tools_dir }}/log
             chdir={{ tools_dir }}
             creates={{ tools_dir }}{{ deployment_uri }}
      when: {{ install_tools }}

    - name: clean up config file for security reasons
      file: path=/tmp/openam_config.properties
            state=absent
