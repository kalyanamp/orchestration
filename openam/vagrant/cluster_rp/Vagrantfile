# -*- mode: ruby -*-
# vi: set ft=ruby :

# TODO: add a reverse proxy with nginx. this should be 10.0.0.2. and in a separate file. likewise create a separate file for a simple, one server setup. and this file should be load balanced but with no rp.

require "vagrant-ansible"

Vagrant::Config.run do |config|
  # default vm configuration
  config.vm.box = "centos63"
  config.vm.customize ["modifyvm", :id, "--cpus", "1"]

  # default openam cluster configuration
  cookie_domain = ".example.com"
  server1_hostname = "oam1" + cookie_domain
  server2_hostname = "oam2" + cookie_domain
  root_suffix = "o=openam,dc=example,dc=com",
  encryption_key = "+bWQiIorIEtulJFcDROx00jh62H5p+LU",
  admin_password = "1234qwer",
  policy_agent_password = "pa1234qwer",
  config_store_password = "cs1234qwer",
  lb_site_name = "oamlb"
  lb_primary_url = "http://oamlb.example.com:8080/signon"
  # lb_primary_url = "https://oamlb.example.com:8443/signon"

  config.vm.define :server1 do |server1_config|
    server1_config.vm.customize ["modifyvm", :id, "--memory", "1024"]

    ip = "10.0.0.4"

    server1_config.vm.network :hostonly, ip
    server1_config.vm.host_name = server1_hostname

    server1_config.vm.provision :ansible do |ansible|
      ansible.playbook = "$HOME/Documents/orchestration/openam/playbooks/setup.yml"

      # avoid using an ansible inventory file
      ansible.hosts = ip

      ansible.sudo = "yes"

      ansible.extra_vars = {
        hosts: ip,
        hostname: server1_hostname,
        cookie_domain: cookie_domain,
        root_suffix: root_suffix,
        encryption_key: encryption_key,
        admin_password: admin_password,
        policy_agent_password: policy_agent_password,
        config_store_password: config_store_password,
        tools: "yes",
        headless: "yes",
        lb_site_name: "oamlb",
        lb_primary_url: "https://oamlb.example.com:8443/signon"
        # container_keypass
        # container_storepass
        # container_ssl
      }

      ansible.options = "-vv"
    end
  end

  config.vm.define :oam2 do |oam2_config|
    oam2_config.vm.customize ["modifyvm", :id, "--memory", "1024"]

    oam2_ip = "10.0.0.5"

    oam2_config.vm.network :hostonly, oam2_ip
    oam2_config.vm.host_name = "oam2.example.com"

    # TODO: automatically grab this definition from the vm below
    oam2_existing_host_name = "server1.example.com"
    # oam2_existing_host_name = config.vm.server1.host_name

    oam2_config.vm.provision :ansible do |ansible|
      ansible.playbook = "$HOME/Documents/orchestration/openam/playbooks/setup.yml"

      # avoid using an ansible inventory file
      ansible.hosts = oam2_ip

      ansible.sudo = "yes"

      ansible.extra_vars = {
        hosts: oam2_ip,
        openam_hostname: oam2_config.vm.host_name,
        openam_cookie_domain: ".example.com",
        openam_root_suffix: "o=openam,dc=example,dc=com",
        openam_tools: "yes",
        openam_encryption_key: "+bWQiIorIEtulJFcDROx00jh62H5p+LU",
        openam_admin_password: "1234qwer",
        openam_agent_password: "pa1234qwer",
        openam_mgr_password: "mgr1234qwer",
        openam_join_cluster: "yes",
        openam_existing_host: oam2_existing_host_name,
        openam_existing_id: "http://" + oam2_existing_host_name + ":8080/signon",
        # TODO: automatically grab this definition from the vm below
        openam_lb_site_name: "oamlb",
        openam_lb_primary_url: "https://oamlb.example.com:8443/signon"
      }

      ansible.options = "-vv"
    end
  end

  # config.vm.define :oamlb do |oamlb_config|
  #   oamlb_config.vm.customize ["modifyvm", :id, "--memory", "512"]

  #   oamlb_config.vm.network :hostonly, "10.0.0.3"
  #   oamlb_config.vm.host_name = "oamlb.example.com"

  #   oamlb_config.vm.provision :ansible do |ansible|
  #     # specify the playbook to run
  #     ansible.playbook = "$HOME/Documents/orchestration/haproxy/playbooks/setup.yml"

  #     # avoid using an ansible inventory file
  #     ansible.hosts = "10.0.0.3"

  #     ansible.sudo = "yes"

  #     # TODO: check if haproxy can deal with hostnames instead of ips (cleaner)
  #     ansible.extra_vars = {
  #       openam_server_1_ip: server1_config.vm.network[1],
  #       openam_server_2_ip: server1_config.vm.network[1],
  #       # TODO: try ssl too
  #       openam_port: "8080",
  #       stats_user: "foo",
  #       stats_password: "bar",
  #     }

  #     ansible.options = "-vv"
  #   end
  # end

end
